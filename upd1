local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local lp = game.Players.LocalPlayer
local RS = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local Camera = workspace.CurrentCamera

local function generarNombreFalso()
	local palabras = {"Xeno", "Nova", "Ghost", "Delta", "Hex", "Neo", "Zero", "Void", "Pixel", "Rift"}
	local sufijo = math.random(100, 999)
	return palabras[math.random(1, #palabras)] .. sufijo
end

local function ocultarNombreEnGui(nombreOriginal, nombreFalso)
	local function filtrarTexto(gui)
		for _, obj in pairs(gui:GetDescendants()) do
			if obj:IsA("TextLabel") or obj:IsA("TextButton") then
				if string.find(obj.Text, nombreOriginal) then
					obj.Text = obj.Text:gsub(nombreOriginal, nombreFalso)
				end
			end
		end
	end

	return task.spawn(function()
		while true do
			pcall(function()
				filtrarTexto(game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"))
				filtrarTexto(game:GetService("CoreGui"))
			end)
			task.wait(0.5)
		end
	end)
end

local floatEnabled, godEnabled, walkEnabled, flyEnabled, noclipEnabled = false, false, false, false, false
local floatLoop, godConnection, wsConnection, noclipConn, flyConn, antiTPConnection, movementConnection = nil, nil, nil, nil, nil, nil, nil
local walkSpeedValue, flySpeed, height, speed, waitTime = 32, 32, 10, 0.2, 0.01
local lastPos = nil
local normalFOV = Camera.FieldOfView
local originalName = lp.Name
local nombreFalso_UI = generarNombreFalso()
local limpiezaTask = nil
local infiniteJumpEnabled = false
local jumpConnection
local autoRejoinEnabled = false
local hookRejoin = nil
local guiDetectionConn = nil
local antiBoogieConn = nil
local defaultFOV = Camera.FieldOfView

local originalEffects = {}
local function saveOriginalEffects()
	originalEffects = {}
	for _, effect in pairs(Lighting:GetChildren()) do
		if effect:IsA("ColorCorrectionEffect") or effect:IsA("BlurEffect") then
			table.insert(originalEffects, effect:Clone())
		end
	end
end

local function restoreOriginalEffects()
	for _, v in pairs(Lighting:GetChildren()) do
		if v:IsA("ColorCorrectionEffect") or v:IsA("BlurEffect") then
			v:Destroy()
		end
	end
	for _, effect in pairs(originalEffects) do
		effect.Parent = Lighting
	end
end

local function getCameraInputDirection()
	local cam = workspace.CurrentCamera
	local dir = Vector3.zero
	if UIS:IsKeyDown(Enum.KeyCode.W) then dir += cam.CFrame.LookVector end
	if UIS:IsKeyDown(Enum.KeyCode.S) then dir -= cam.CFrame.LookVector end
	if UIS:IsKeyDown(Enum.KeyCode.D) then dir += cam.CFrame.RightVector end
	if UIS:IsKeyDown(Enum.KeyCode.A) then dir -= cam.CFrame.RightVector end
	return dir.Magnitude > 0 and Vector3.new(dir.X, 0, dir.Z).Unit or Vector3.zero
end

local function createBoxESP(player)
	if player == lp then return end
	local char = player.Character
	if not char or not char:FindFirstChild("HumanoidRootPart") then return end
	if not char:FindFirstChild("BoxESP") then
		local box = Instance.new("BoxHandleAdornment")
		box.Name = "BoxESP"
		box.Adornee = char:FindFirstChild("HumanoidRootPart")
		box.AlwaysOnTop = true
		box.ZIndex = 10
		box.Size = Vector3.new(3, 5, 1)
		box.Color3 = Color3.fromRGB(255, 255, 255)
		box.Transparency = 0.6
		box.Parent = char
	end
end

task.spawn(function()
	while true do
		if boxESPEnabled then
			for _, player in pairs(game.Players:GetPlayers()) do
				createBoxESP(player)
			end
		else
			for _, player in pairs(game.Players:GetPlayers()) do
				local char = player.Character
				if char and char:FindFirstChild("BoxESP") then
					char.BoxESP:Destroy()
				end
			end
		end
		task.wait(1)
	end
end)

local validPositions = {
	Vector3.new(-517.13, -5.10, 220.66),
	Vector3.new(-517.48, -5.10, 113.48),
	Vector3.new(-517.52, -5.10,   6.59),
	Vector3.new(-517.39, -5.10, -100.83),
	Vector3.new(-301.08, -5.04, -100.64),
	Vector3.new(-301.60, -5.10,    6.33),
	Vector3.new(-302.36, -5.10,  221.03),
	Vector3.new(-301.60, -5.10, 113.76)
}

local function isCloseToAnyValidPosition(pos)
	for _, valid in pairs(validPositions) do
		if (pos - valid).Magnitude <= 10 then
			return true
		end
	end
	return false
end

local function updateAllTimerESPs()
	for _, label in pairs(workspace:GetDescendants()) do
		if label:IsA("TextLabel") and label:IsDescendantOf(workspace) then
			local text = label.Text
			if string.match(text, "^%d+s$") then
				local parentGui = label.Parent
				local adornee = parentGui and (parentGui.Adornee or parentGui.Parent)

				if adornee and adornee:IsA("BasePart") then
					local pos = adornee.Position
					if isCloseToAnyValidPosition(pos) then
						if not adornee:FindFirstChild("UniversalTimerESP") then
							local esp = Instance.new("BillboardGui")
							esp.Name = "UniversalTimerESP"
							esp.Size = UDim2.new(0, 100, 0, 40)
							esp.AlwaysOnTop = true
							esp.Adornee = adornee
							esp.StudsOffset = Vector3.new(0, 2.5, 0)

							local textLabel = Instance.new("TextLabel")
							textLabel.Name = "ESPText"
							textLabel.Size = UDim2.new(1, 0, 1, 0)
							textLabel.BackgroundTransparency = 1
							textLabel.TextScaled = true
							textLabel.Font = Enum.Font.FredokaOne
							textLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
							textLabel.TextStrokeTransparency = 0
							textLabel.Text = text
							textLabel.Parent = esp

							esp.Parent = adornee
						else
							local gui = adornee:FindFirstChild("UniversalTimerESP")
							if gui and gui:FindFirstChild("ESPText") then
								gui.ESPText.Text = text
							end
						end
					else
						if adornee:FindFirstChild("UniversalTimerESP") then
							adornee.UniversalTimerESP:Destroy()
						end
					end
				end
			end
		end
	end
end

task.spawn(function()
	while true do
		if timerESPEnabled then
			pcall(updateAllTimerESPs)
		else
			for _, obj in pairs(workspace:GetDescendants()) do
				if obj.Name == "UniversalTimerESP" then
					obj:Destroy()
				end
			end
		end
		task.wait(0.4)
	end
end)

local Window = Rayfield:CreateWindow({
	Name = "| Hub Waza |",
	LoadingTitle = "Loading...",
	LoadingSubtitle = "by waza",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "WazaGodFloatSpeed",
		FileName = "Settings"
	},
	KeySystem = false
})

local Tab_Movimiento = Window:CreateTab("movements")
local Tab_Proteccion = Window:CreateTab("Protections")
local Tab_Ajustes = Window:CreateTab("Settings")
local Tab_ESP = Window:CreateTab("ESP")
local Tab_Extras = Window:CreateTab("Extras")

Tab_Movimiento:CreateToggle({
    Name = "Fly",
    Flag = "FlyToggle",
    CurrentValue = false,
    Callback = function(state)
        if state and (not godEnabled) then
            Rayfield:Notify({
                Title = "Fly",
                Content = "Please enable Godmode and Anti TP first to use Fly.",
                Duration = 3
            })
            Rayfield.Flags["FlyToggle"]:Set(false)
            return
        end

        flyEnabled = state
        if flyEnabled then
            local char = lp.Character or lp.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            local hum = char:WaitForChild("Humanoid")

            Rayfield:Notify({
                Title = "Fly",
                Content = "Fly activated uses 40 speed maximum on mobile.",
                Duration = 3
            })

            flyConn = RS.RenderStepped:Connect(function()
                if not (char and char.Parent) then return end

                local cam = workspace.CurrentCamera
                local camLook = cam.CFrame.LookVector
                local moveVec = Vector3.zero

                if hum.MoveDirection.Magnitude > 0 then
                    moveVec = camLook.Unit * flySpeed
                end

                if UIS:IsKeyDown(Enum.KeyCode.Space) then
                    moveVec = moveVec + Vector3.new(0, flySpeed, 0)
                elseif UIS:IsKeyDown(Enum.KeyCode.LeftControl) then
                    moveVec = moveVec - Vector3.new(0, flySpeed, 0)
                end

                hrp.Velocity = moveVec
            end)
        else
            if flyConn then flyConn:Disconnect() flyConn = nil end
            local char = lp.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                char.HumanoidRootPart.Velocity = Vector3.zero
            end
        end
    end
})

Tab_Movimiento:CreateToggle({
	Name = "WalkSpeed",
	Flag = "WalkSpeedToggle",
	CurrentValue = false,
	Callback = function(enabled)
		walkEnabled = enabled

		if movementConnection then
			movementConnection:Disconnect()
			movementConnection = nil
		end

		if enabled then
			local isMobile = UIS.TouchEnabled and not UIS.KeyboardEnabled
			movementConnection = RS.RenderStepped:Connect(function()
				local char = lp.Character
				if not char then return end

				local hrp = char:FindFirstChild("HumanoidRootPart")
				local hum = char:FindFirstChildOfClass("Humanoid")
				if not hrp or not hum then return end

				hum.PlatformStand = false
				hum:ChangeState(Enum.HumanoidStateType.Running)

				local horizontalVel = Vector3.zero

				if isMobile then
					local moveDir = hum.MoveDirection
					if moveDir.Magnitude > 0.1 then
						local dir = Vector3.new(moveDir.X, 0, moveDir.Z).Unit
						horizontalVel = dir * walkSpeedValue
					end
				else
					local moveVec = Vector3.zero
					if UIS:IsKeyDown(Enum.KeyCode.W) then moveVec += Camera.CFrame.LookVector end
					if UIS:IsKeyDown(Enum.KeyCode.S) then moveVec -= Camera.CFrame.LookVector end
					if UIS:IsKeyDown(Enum.KeyCode.D) then moveVec += Camera.CFrame.RightVector end
					if UIS:IsKeyDown(Enum.KeyCode.A) then moveVec -= Camera.CFrame.RightVector end

					if moveVec.Magnitude > 0 then
						local dir = Vector3.new(moveVec.X, 0, moveVec.Z).Unit
						horizontalVel = dir * walkSpeedValue
					end
				end

				local currentY = hrp.AssemblyLinearVelocity.Y
				local clampedY = math.clamp(currentY, -50, 50)
				local verticalVel = Vector3.new(0, clampedY, 0)

				hrp.AssemblyLinearVelocity = horizontalVel + verticalVel
			end)

			lp.CharacterAdded:Connect(function()
				if walkEnabled then
					task.wait(1)
					Rayfield.Flags["WalkSpeedToggle"]:Set(true)
				end
			end)
		end
	end
})

Tab_Movimiento:CreateToggle({
    Name = "Noclip",
    Flag = "NoclipToggle",
    CurrentValue = false,
    Callback = function(enabled)
        noclipEnabled = enabled
        if noclipEnabled then
            local function applyNoclip()
                local char = lp.Character or lp.CharacterAdded:Wait()
                noclipConn = RS.RenderStepped:Connect(function()
                    for _, part in pairs(char:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end)
            end

            applyNoclip()
            lp.CharacterAdded:Connect(function()
                if noclipEnabled then task.wait(1); applyNoclip() end
            end)
        else
            if noclipConn then noclipConn:Disconnect() end
            local char = lp.Character
            if char then
                for _, part in pairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
    end
})

Tab_Movimiento:CreateToggle({
	Name = "Float",
	Flag = "FloatToggle",
	CurrentValue = false,
	Callback = function(state)
		if state and not godEnabled then
			Rayfield:Notify({
				Title = "Godmode required",
				Content = "Please activate Godmode first to use Float.",
				Duration = 3
			})
			Rayfield.Flags["FloatToggle"]:Set(false)
			return
		end

		floatEnabled = state
		if floatEnabled then
			local function floatCycle()
				local char = lp.Character or lp.CharacterAdded:Wait()
				local hrp = char:WaitForChild("HumanoidRootPart")
				while floatEnabled and char and hrp do
					for i = 1, height do
						if not floatEnabled then return end
						hrp.CFrame = hrp.CFrame + Vector3.new(0, speed, 0)
						task.wait(waitTime)
					end
					for i = height, 1, -1 do
						if not floatEnabled then return end
						local ray = Workspace:Raycast(hrp.Position, Vector3.new(0, -3, 0), RaycastParams.new())
						if ray and hrp.Position.Y - ray.Position.Y < 3 then break end
						hrp.CFrame = hrp.CFrame - Vector3.new(0, speed, 0)
						task.wait(waitTime)
					end
				end
			end
			floatLoop = coroutine.create(floatCycle)
			coroutine.resume(floatLoop)
		else
			floatLoop = nil
		end
	end
})

Tab_Movimiento:CreateToggle({
	Name = "Infinite Jump",
	Flag = "InfiniteJumpToggle",
	CurrentValue = false,
	Callback = function(enabled)
		if enabled and not godEnabled then
			Rayfield:Notify({
				Title = "Godmode required",
				Content = "Activate Godmode first to use Infinite Jump.",
				Duration = 3
			})
			Rayfield.Flags["InfiniteJumpToggle"]:Set(false)
			return
		end

		infiniteJumpEnabled = enabled

		if jumpConnection then jumpConnection:Disconnect() jumpConnection = nil end

		if enabled then
			jumpConnection = UIS.JumpRequest:Connect(function()
				local char = lp.Character
				if char and char:FindFirstChildOfClass("Humanoid") then
					char:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
				end
			end)

			lp.CharacterAdded:Connect(function()
				if infiniteJumpEnabled then
					task.wait(1)
					if jumpConnection then jumpConnection:Disconnect() end
					jumpConnection = UIS.JumpRequest:Connect(function()
						local char = lp.Character
						if char and char:FindFirstChildOfClass("Humanoid") then
							char:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
						end
					end)
				end
			end)
		end
	end
})

Tab_Ajustes:CreateKeybind({
	Name = "Key to activate Fly",
	CurrentKeybind = "F",
	HoldToInteract = false,
	Callback = function()
		if not godEnabled then
			Rayfield:Notify({
				Title = "Fly Requirements",
				Content = "Please enable Godmode first to use Fly.",
				Duration = 3
			})
			return
		end

		local toggle = not flyEnabled
		Rayfield:Notify({
			Title = "Fly",
			Content = toggle and "Actived" or "Disabled",
			Duration = 2
		})
		Rayfield.Flags["FlyToggle"]:Set(toggle)
	end
})

Tab_Ajustes:CreateKeybind({
    Name = "Key to activate WalkSpeed",
    CurrentKeybind = "G",
    HoldToInteract = false,
    Callback = function()
        local toggle = not walkEnabled
        Rayfield:Notify({Title = "WalkSpeed", Content = toggle and "Actived" or "Disabled", Duration = 2})
        Rayfield.Flags["WalkSpeedToggle"]:Set(toggle)
    end
})

Tab_Ajustes:CreateKeybind({
	Name = "Key to activate Float",
	CurrentKeybind = "H",
	HoldToInteract = false,
	Callback = function()
		if not godEnabled then
			Rayfield:Notify({
				Title = "Godmode required",
				Content = "Please activate Godmode first to use Float.",
				Duration = 3
			})
			return
		end

		local toggle = not floatEnabled
		Rayfield:Notify({
			Title = "Float",
			Content = toggle and "Actived" or "Disabled",
			Duration = 2
		})
		Rayfield.Flags["FloatToggle"]:Set(toggle)
	end
})

Tab_Ajustes:CreateKeybind({
    Name = "Key to activate Noclip",
    CurrentKeybind = "J",
    HoldToInteract = false,
    Callback = function()
        local toggle = not noclipEnabled
        Rayfield:Notify({Title = "Noclip", Content = toggle and "Actived" or "Disabled", Duration = 2})
        Rayfield.Flags["NoclipToggle"]:Set(toggle)
    end
})

Tab_Ajustes:CreateKeybind({
	Name = "Key to activate Infinite Jump",
	CurrentKeybind = "Y",
	HoldToInteract = false,
	Callback = function()
		if not godEnabled then
			Rayfield:Notify({
				Title = "Godmode requerido",
				Content = "Activate Godmode first to use Infinite Jump.",
				Duration = 3
			})
			return
		end

		local toggle = not infiniteJumpEnabled
		Rayfield:Notify({
			Title = "Infinite Jump",
			Content = toggle and "Actived" or "Disabled",
			Duration = 2
		})
		Rayfield.Flags["InfiniteJumpToggle"]:Set(toggle)
	end
})

Tab_Proteccion:CreateToggle({
    Name = "Godmode",
    CurrentValue = false,
    Callback = function(value)
        godEnabled = value
        if godEnabled then
            local function applyGod()
                local char = lp.Character or lp.CharacterAdded:Wait()
                local hum = char:WaitForChild("Humanoid")
                if hum then
                    hum.Health = 100
                    if godConnection then godConnection:Disconnect() end
                    godConnection = hum:GetPropertyChangedSignal("Health"):Connect(function()
                        if godEnabled and hum.Health < 100 then
                            hum.Health = 100
                        end
                    end)
                end
            end
            lp.CharacterAdded:Connect(function() if godEnabled then applyGod() end end)
            applyGod()
        else
            if godConnection then godConnection:Disconnect() godConnection = nil end
        end
    end
})

Tab_Proteccion:CreateToggle({
    Name = "Anti TP",
    CurrentValue = false,
    Callback = function(enabled)
        if antiTPConnection then antiTPConnection:Disconnect() end
        if enabled then
            antiTPConnection = RS.RenderStepped:Connect(function()
                local char = lp.Character
                if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChildOfClass("Humanoid") then
                    local hrp = char.HumanoidRootPart
                    local hum = char:FindFirstChildOfClass("Humanoid")
                    if hum:GetState() ~= Enum.HumanoidStateType.Dead then
                        if lastPos and (hrp.Position - lastPos).Magnitude > 20 then
                            hrp.CFrame = CFrame.new(lastPos)
                        else
                            lastPos = hrp.Position
                        end
                    end
                end
            end)
        else
            lastPos = nil
        end
    end
})

Tab_Proteccion:CreateToggle({
	Name = "Anti Bee Launcher",
	CurrentValue = false,
	Callback = function(enabled)
		if movementConnection then movementConnection:Disconnect() end

		if enabled then
			saveOriginalEffects()

			Rayfield:Notify({
				Title = "Protection Activated",
				Content = "The Anti Bee Launcher feature has been successfully disabled.",
				Duration = 4
			})

			movementConnection = RS.RenderStepped:Connect(function()
				local char = lp.Character
				if not char then return end

				local hrp = char:FindFirstChild("HumanoidRootPart")
				local hum = char:FindFirstChildOfClass("Humanoid")
				local cam = workspace.CurrentCamera
				if not hrp or not hum or not cam then return end

				for _, v in pairs(Lighting:GetChildren()) do
					if v:IsA("ColorCorrectionEffect") or v:IsA("BlurEffect") then
						v:Destroy()
					end
				end

				if cam.FieldOfView ~= normalFOV then
					cam.FieldOfView = normalFOV
				end

				local inputDir = getCameraInputDirection()
				local vel = hrp.AssemblyLinearVelocity

				if inputDir ~= Vector3.zero then
					local dot = vel.Magnitude > 0 and vel.Unit:Dot(inputDir) or 1

					if dot < -0.3 then
						hum:Move(Vector3.zero, true)
						hrp.AssemblyLinearVelocity = inputDir * correctedSpeed
					else
						hrp.AssemblyLinearVelocity = inputDir * correctedSpeed
					end
				else
					hrp.AssemblyLinearVelocity = Vector3.new(0, vel.Y, 0)
				end
			end)

		else
			if movementConnection then
				movementConnection:Disconnect()
				movementConnection = nil
			end

			restoreOriginalEffects()
			if Camera then Camera.FieldOfView = normalFOV end

			Rayfield:Notify({
				Title = "Protection Disabled",
				Content = "Screen restored successfully.",
				Duration = 3
			})
		end
	end
})

Tab_Proteccion:CreateToggle({
	Name = "Auto Rejoin if Kick",
	CurrentValue = false,
	Callback = function(enabled)
		autoRejoinEnabled = enabled

		local TeleportService = game:GetService("TeleportService")
		local Players = game:GetService("Players")
		local player = Players.LocalPlayer

		if not enabled then
			if hookRejoin then
				setreadonly(getrawmetatable(game), false)
				getrawmetatable(game).__namecall = hookRejoin
				setreadonly(getrawmetatable(game), true)
				hookRejoin = nil
			end

			if guiDetectionConn then
				guiDetectionConn:Disconnect()
				guiDetectionConn = nil
			end

			Rayfield:Notify({
				Title = "Auto Rejoin Disabled",
				Content = "Kick and error protection disabled.",
				Duration = 3
			})
			return
		end

		local mt = getrawmetatable(game)
		local oldNamecall = mt.__namecall
		setreadonly(mt, false)

		hookRejoin = newcclosure(function(self, ...)
			local method = getnamecallmethod()
			local args = { ... }

			if tostring(self) == "Kick" or method == "kick" then
				task.delay(0.25, function()
					TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
				end)
				return nil
			end

			return oldNamecall(self, unpack(args))
		end)

		mt.__namecall = hookRejoin
		setreadonly(mt, true)

		guiDetectionConn = game.CoreGui.ChildAdded:Connect(function(child)
			if child:IsA("ScreenGui") and (child:FindFirstChildWhichIsA("TextLabel", true) or child:FindFirstChildWhichIsA("ImageLabel", true)) then
				if string.lower(child.Name):find("error") or child.Name:find("Message") then
					task.wait(0.5)
					pcall(function()
						TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
					end)
				end
			end
		end)

		Rayfield:Notify({
			Title = "Auto Rejoin Actived",
			Content = "Active kick and visual error protection.",
			Duration = 4
		})
	end
})

local antiBoogieConn = nil
local defaultFOV = Camera.FieldOfView

local antiBoogieConn = nil
local defaultFOV = Camera.FieldOfView

Tab_Proteccion:CreateToggle({
	Name = "Anti Boogie Bomb",
	CurrentValue = false,
	Callback = function(enabled)
		if antiBoogieConn then antiBoogieConn:Disconnect() end

		if enabled then
			Rayfield:Notify({
				Title = "Anti Boogie Bomb",
				Content = "Boogie bloqueado: Animación, zoom, efectos y sonido.",
				Duration = 4
			})

			antiBoogieConn = RS.RenderStepped:Connect(function()
				local char = lp.Character
				if not char then return end

				local hum = char:FindFirstChildOfClass("Humanoid")
				if not hum then return end

				-- 🕺 Cancelar animación
				for _, track in pairs(hum:GetPlayingAnimationTracks()) do
					local animName = string.lower(track.Name)
					local animId = string.lower((track.Animation and track.Animation.AnimationId) or "")
					if animName:find("dance") or animName:find("boogie") or animId:find("dance") or animId:find("boogie") then
						track:Stop()
					end
				end

				-- 🌫️ Eliminar efectos visuales
				for _, effect in pairs(Lighting:GetChildren()) do
					if effect:IsA("ColorCorrectionEffect") or effect:IsA("BlurEffect") then
						if effect.TintColor == Color3.new(1,1,1) or effect.Name:lower():find("boogie") then
							effect:Destroy()
						end
					end
				end

				-- 🔍 Restaurar zoom
				if math.abs(Camera.FieldOfView - defaultFOV) > 0.1 then
					Camera.FieldOfView = defaultFOV
				end

				-- 🔇 Eliminar sonidos
				for _, s in pairs(workspace:GetDescendants()) do
					if s:IsA("Sound") then
						local sid = string.lower(s.SoundId)
						local name = string.lower(s.Name)
						if sid:find("boogie") or sid:find("dance") or name:find("boogie") or name:find("dance") then
							s:Destroy()
						end
					end
				end
			end)
		else
			if antiBoogieConn then
				antiBoogieConn:Disconnect()
				antiBoogieConn = nil
			end

			Rayfield:Notify({
				Title = "Anti Boogie Bomb",
				Content = "Desactivado. Efectos reactivados.",
				Duration = 3
			})
		end
	end
})

Tab_Ajustes:CreateSlider({
    Name = "Fly Speed",
    Range = {32, 55},
    Increment = 1,
    CurrentValue = flySpeed,
    Callback = function(v) flySpeed = v end
})

Tab_Ajustes:CreateSlider({
    Name = "WalkSpeed",
    Range = {32, 50},
    Increment = 1,
    CurrentValue = walkSpeedValue,
    Callback = function(v)
        walkSpeedValue = v
        if walkEnabled then
            local char = lp.Character or lp.CharacterAdded:Wait()
            local hum = char:FindFirstChildOfClass("Humanoid")
            if hum then hum.WalkSpeed = walkSpeedValue end
        end
    end
})

Tab_Ajustes:CreateSlider({
    Name = "Maximum float height",
    Range = {5, 25},
    Increment = 1,
    CurrentValue = height,
    Callback = function(v) height = v end
})

Tab_Ajustes:CreateSlider({
    Name = "Upload/download speed (Float)",
    Range = {0.05, 1},
    Increment = 0.05,
    CurrentValue = speed,
    Callback = function(v) speed = v end
})

Tab_ESP:CreateToggle({
	Name = "Player Esp",
	CurrentValue = false,
	Callback = function(v)
		boxESPEnabled = v
	end
})

Tab_ESP:CreateToggle({
	Name = "ESP Timer",
	CurrentValue = false,
	Callback = function(v)
		timerESPEnabled = v
	end
})

Tab_Extras:CreateToggle({
	Name = "Fake Name",
	CurrentValue = false,
	Callback = function(enabled)
		if enabled then
			Rayfield:Notify({
				Title = "Modo Interfaz Limpia",
				Content = "Replacing your name with: " .. nombreFalso_UI,
				Duration = 4
			})

			limpiezaTask = ocultarNombreEnGui(originalName, nombreFalso_UI)
		else
			if limpiezaTask then
				task.cancel(limpiezaTask)
				limpiezaTask = nil
			end

			Rayfield:Notify({
				Title = "Nombre Restaurado",
				Content = "Your name is no longer leaked on interfaces.",
				Duration = 3
			})
		end
	end
})

Tab_Extras:CreateButton({
	Name = "Rejoin",
	Callback = function()
		local TeleportService = game:GetService("TeleportService")
		local Players = game:GetService("Players")
		local player = Players.LocalPlayer
		TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
	end
})
